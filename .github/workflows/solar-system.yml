name: Solar System Workflow

on:
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'
#workflow fails at testing job due to unestablishment of MongoDB connection if these value are not passed.
env:      #These credentials belong to prod database and its going to impact the performance of of the prod db. Its never recommended to use prod db for testing the app. Instead, use dedicated db for testing.
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:              #Example of utilizing service container with job steps running in hosted runner
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod   #non prod db
            ports:
              - 27017:27017   #port mapping between local host and service container
        env:    #env variables defined at job level takes precedence over the env variable defined at workflo level
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password ## for demo purpose, the credentials are hardcoded
        strategy:
            matrix:
                nodejs_version: [18, 20]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_version }}

            - name: Cache NPM Dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              id: node-unit-testing-step    
              run: npm test
            #If the above Unit Testing step fails(for example, failed test case or syntax error), the Archive Test Result step will be skipped. 
            #And you cannot debug the issue without seeing the test results but is is not available since this setp will be skipped in a failure scenario.
            #To overcome that, we can use expressions to to run Archive Test Result step always irrespective of above step's state
            - name: Archive Test Result
              #In case of conditionif: steps.node-unit-testing-step.outcome == 'failure' || steps.node-unit-testing-step.outcome == 'success'
              #Although, this condition is true, this steps will still be skipped in case of failure. Its beacause, a deafult status check of success() is applied unles you include other functions.
              # So, the below condition will be success() && (steps.node-unit-testing-step.outcome == 'failure' || steps.node-unit-testing-step.outcome == 'success'). The condition will be false when the previous step is failed. Hence the step will be skipped.
              #Conditionif: failure() && (steps.node-unit-testing-step.outcome == 'failure' || steps.node-unit-testing-step.outcome == 'success') will only run his step in case of failure and in success scenario, this step will be skipped.
              if: always() #runs irrespective of the ststus of previous step
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml

    #Need to setup nodejs first since its a different job  ##runs in parallel with unit-testing job
    code-coverage:       #Example of utilizing job container(for running steps) and service container
        name: Code-Coverage
        container:
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod   #non prod db
            options:
              --name mongo  #job container name label
        env:    #env variables defined at job level takes precedence over the env variable defined at workflo level
          MONGO_URI: 'mongodb://mongo:27017/superData'  #'mongo' name is how we refer to the service container
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password ## for demo purpose, the credentials are hardcoded
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            # - name: Setup NodeJS Version - 18   #As we are using job container, we don't need this step to setup NodeJS
            #   uses: actions/setup-node@v3
            #   with:
            #     node-version: 18

            - name: Cache NPM Dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependencies
              run: npm install

            - name: Check Code Coverage
              continue-on-error: true   #We want this job to be run even if the coverage is below the threshold
              run: npm run coverage

            - name: Archive Test Result
              uses: actions/upload-artifact@v4
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5
                
    docker:
      name: Containerization
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod   #non prod db
          ports:
            - 27017:27017   #port mapping between local host and service container
      env:    #env variables defined at job level takes precedence over the env variable defined at workflo level
        MONGO_URI: 'mongodb://localhost:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      permissions:          #permissions added to write packages to github token
        packages: write
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage] #this job should run only after unit testing and code coverage
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}   #context attribute
            password: ${{ secrets.GITHUB_TOKEN }}      #A github token is created at the start of each workflow and we can use that token to authenticate and by default it has only read access

        - name: Docker Build for testing
          uses: docker/build-push-action@v5
          with:
            context: .   # path of dockerfile in the repo
            push: false  # not pushing the image in this step
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}  #SHA value of the commit id in github
        
        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP 

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
          #We are not using docker container's IP to test here. Instead, we are using local host with live endpoint defined in app.js
        
        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |                         #multiple tags for pushing image to multiple registries
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      #this job should run only when it is triggered by feature branch
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        sa_key: ${{ secrets.GCP_SA_KEY}}   #passing required secrets to called workflow
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}


    dev-integration-testing:
      name: Dev Integration Testing
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL}}  #using outpute stored in previous job; Instead of actual URL, we are using IP address
          run: |
            echo "$URL" 
            echo "-------------------------------------------------"
            curl http://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      #this job should run only when it is triggred by main branch commit  
      needs: docker  #we are going to run the workflow on either dev or prod env. So this deployement is independent of dev intergation testing. Hence it should depend on docker job after image creation for prod deployment
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        sa_key: ${{ secrets.GCP_SA_KEY}}   #passing required secrets to called workflow
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      
    prod-integration-testing:
      name: Prod Integration Testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL}}  
          run: |
            echo "$URL" 
            echo "-------------------------------------------------"
            curl http://$URL/live -s -k | jq -r .status | grep -i live


